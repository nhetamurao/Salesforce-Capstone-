@isTest

private class BookingTriggerTest {

    @isTest

    static void testTriggerCreatesPaymentAndGuestsWithUpdatedFields() {

        // Create test customer

        Customer_Info__c customer = new Customer_Info__c(

            Name = 'John Doe',

            Email__c = 'annapurna@gmail.com', // enter your valid email address here

            Phone__c = '1234567890',
            
            Date_Of_Birth__c = Date.today().addYears(-30)

        );

        insert customer;

        // Create a Travel Package

        TravelPackage__c packageRec = new TravelPackage__c(

            Name = 'European Delight',

            Country__c = 'India',

            Price_Per_Person__c = 2000,

            Duration_in_Days__c = 3,
            
            Places_Covered__c = 'Paris, Rome, Barcelona'

        );

        insert packageRec;

        // Create a test Booking record

        Booking__c booking = new Booking__c(

            Number_of_Travelers__c = 3,

            Booking_Status__c = 'Pending',

            Travelling_Start_Date__c = Date.today().addDays(10),

            TravelPackage__c = packageRec.Id,

            Membership_Chosen_Req__c = 'Gold',

            Preferred_Accommodation__c = 'Guest House',

            Customer_Info__c = customer.Id,
            //Customer__c = customer.Id, // fixed field name

            Customer_Email__c ='annapurna@gmail.com', // enter a valid email address here
            
   			Booking_Date__c = Date.today() // added required field

        );

        Test.startTest();

        insert booking; // Trigger will fire here

        Test.stopTest();

        // Validate Booking_Payment__c creation

        List<Booking_Payment__c> payments = [

            SELECT Id, Booking__c, Payment_Status__c 

            FROM Booking_Payment__c 

            WHERE Booking__c = :booking.Id

        ];

        System.assertEquals(1, payments.size(), 'One payment record should be created.');

        System.assertEquals('Pending', payments[0].Payment_Status__c, 'Default Payment Status should be Pending.');

        // Validate BookingGuest__c creation

        List<BookingGuest__c> guests = [

            SELECT Id, Booking__c, Name 

            FROM BookingGuest__c 

            WHERE Booking__c = :booking.Id

        ];

        System.assertEquals(3, guests.size(), 'Three BookingGuest records should be created.');

        System.assertEquals('Guest 1', guests[0].Name, 'Guest naming should follow convention.');

    }

}